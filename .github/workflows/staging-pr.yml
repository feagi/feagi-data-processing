name: Staging PR Tests

on:
  pull_request:
    branches: [ staging ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test-and-version-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Fetch staging branch
      run: git fetch origin staging:staging
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Run basic tests
      run: cargo test --verbose
    
    - name: Check if package builds
      run: cargo build
    
    - name: Check version number increase
      run: |
        # Get current version from PR branch (HEAD)
        CURRENT_VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        echo "PR branch version: $CURRENT_VERSION"
        
        # Get version from staging branch
        git show staging:Cargo.toml > staging_cargo.toml
        STAGING_VERSION=$(grep '^version = ' staging_cargo.toml | sed 's/version = "\(.*\)"/\1/')
        echo "Staging branch version: $STAGING_VERSION"
        
        # Clean up temporary file
        rm staging_cargo.toml
        
        # Compare versions using sort -V (version sort)
        if [ "$CURRENT_VERSION" = "$STAGING_VERSION" ]; then
          echo "❌ Error: Version must be increased from staging branch"
          echo "PR version: $CURRENT_VERSION, Staging version: $STAGING_VERSION"
          exit 1
        fi
        
        # Check if current version is greater than staging version
        HIGHER_VERSION=$(printf '%s\n%s\n' "$STAGING_VERSION" "$CURRENT_VERSION" | sort -V | tail -n1)
        if [ "$HIGHER_VERSION" != "$CURRENT_VERSION" ]; then
          echo "❌ Error: Version must be higher than staging branch"
          echo "PR version: $CURRENT_VERSION, Staging version: $STAGING_VERSION"
          exit 1
        fi
        
        echo "✅ Version check passed: $STAGING_VERSION → $CURRENT_VERSION"
    
    - name: Validate version format
      run: |
        VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
          echo "❌ Error: Version must be in format X.Y.Z or X.Y.Z-suffix"
          exit 1
        fi
        echo "✅ Version format is valid: $VERSION" 