name: Staging Merge - Prerelease

on:
  pull_request:
    branches: [ staging ]
    types: [ closed ]

env:
  CARGO_TERM_COLOR: always

jobs:
  prerelease:
    runs-on: ubuntu-latest
    # Only run if the PR was actually merged (not just closed)
    if: github.event.pull_request.merged == true
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: staging  # Ensure we're on the staging branch after merge
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
    
    - name: Get version from Cargo.toml
      id: version
      run: |
        VERSION=$(grep '^version = ' Cargo.toml | sed 's/version = "\(.*\)"/\1/')
        ORIGINAL_NAME=$(grep '^name = ' Cargo.toml | sed 's/name = "\(.*\)"/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "original_name=$ORIGINAL_NAME" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        echo "Original crate name: $ORIGINAL_NAME"
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Build package
      run: cargo build --release
    
    - name: Package crate (original)
      run: cargo package --verbose
    
    - name: Backup original Cargo.toml
      run: cp Cargo.toml Cargo.toml.backup
    
    - name: Modify crate name for test registry
      run: |
        # Create a test version of the crate name
        ORIGINAL_NAME="${{ steps.version.outputs.original_name }}"
        TEST_NAME="${ORIGINAL_NAME}_nightly"
        
        echo "Temporarily changing crate name from '$ORIGINAL_NAME' to '$TEST_NAME' for test registry"
        
        # Replace the name in Cargo.toml
        sed -i "s/^name = \"$ORIGINAL_NAME\"/name = \"$TEST_NAME\"/" Cargo.toml
        
        # Verify the change
        echo "Modified Cargo.toml name field:"
        grep "^name = " Cargo.toml
        
        # Save the test name for later steps
        echo "test_name=$TEST_NAME" >> $GITHUB_OUTPUT
      id: modify_name
    
    - name: Package crate (test version)
      run: |
        echo "Packaging crate with test name: ${{ steps.modify_name.outputs.test_name }}"
        cargo package --verbose
    
    - name: Publish to test registry
      run: |
        echo "Publishing version ${{ steps.version.outputs.version }} of ${{ steps.modify_name.outputs.test_name }} to test registry..."
        
        # Option 1: If you have a custom test registry, replace the URL below
        # cargo publish --registry your-test-registry --token ${{ secrets.TEST_CARGO_REGISTRY_TOKEN }}
        
        # Option 2: For now, doing a dry run to validate the package
        # You can replace this with actual test registry publishing
        cargo publish --dry-run --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
        
        echo "âœ… Package validation successful for test registry"
        echo "Note: Crate name temporarily changed to ${{ steps.modify_name.outputs.test_name }} for test publishing"
      continue-on-error: false
    
    - name: Restore original Cargo.toml
      run: |
        echo "Restoring original Cargo.toml..."
        mv Cargo.toml.backup Cargo.toml
        
        # Verify restoration
        echo "Restored crate name:"
        grep "^name = " Cargo.toml
        
        # Clean up any generated files with test name
        rm -f target/package/${{ steps.modify_name.outputs.test_name }}-${{ steps.version.outputs.version }}.crate
    
    - name: Create prerelease tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        TAG_NAME="v${{ steps.version.outputs.version }}-pre"
        echo "Creating prerelease tag: $TAG_NAME"
        
        git tag "$TAG_NAME"
        git push origin "$TAG_NAME"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Create GitHub Prerelease
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}-pre
        release_name: Prerelease v${{ steps.version.outputs.version }}
        body: |
          ðŸš€ Prerelease of ${{ steps.version.outputs.original_name }} v${{ steps.version.outputs.version }}
          
          This is a prerelease version from the staging branch.
          
          **Changes:**
          - Version: ${{ steps.version.outputs.version }}
          - Branch: staging
          - Commit: ${{ github.sha }}
          
          **Testing:**
          - âœ… All tests passed
          - âœ… Package builds successfully
          - âœ… Test registry validation completed
          - âœ… Ready for testing
          
          **Test Registry Info:**
          - Test crate name: `${{ steps.modify_name.outputs.test_name }}`
          - Original crate name: `${{ steps.version.outputs.original_name }}`
          
          **Note:** This version has been validated and published to test registry but not yet published to the main crates.io registry.
        draft: false
        prerelease: true 